# --------------------------------------------------------------------------- #
#                                                                             #
#     main.py                                        ::::      ::::::::       #
#                                                  ++: :+:   :+:    :+:       #
#     PROJECT: Advent of Code                    #:+   +:+  +:+               #
#                                              +#++:++#++: +#+                #
#                                             +#+     +#+ +#+                 #
#     AUTHOR: Jorge Lopez Puebla             ##+     #+# #+#    #+#           #
#     LAST UPDATE: 08/12/2024               ###     ###  ########             #
#                                                                             #
# --------------------------------------------------------------------------- #

memory: [[str]] = []
antennas: {str: [[int, int]]} = {}

# Read input file
with open('input.txt', 'r') as file:
    for row, line in enumerate(file.readlines()):
        line_chars = []
        for col, char in enumerate(line.strip()):  # Remove trailing newline
            line_chars.append(char)
            if char.isdigit() or char.isupper() or char.islower():
                if char not in antennas.keys():
                    antennas[char] = [[row, col]]
                else:
                    antennas[char].append([row, col])
        memory.append(line_chars)

# First part: Count the unique antinodes generated by different frequency antennas
antinodes: set = set()  # Use a set for unique antinodes

for freq in antennas.keys():
    if len(antennas[freq]) < 2:
        continue
    positions = antennas[freq]
    for i in range(len(positions)):
        for j in range(i + 1, len(positions)):
            antenna1 = positions[i]
            antenna2 = positions[j]

            # Calculate vector between the two antennas
            dx, dy = antenna2[0] - antenna1[0], antenna2[1] - antenna1[1]

            # Find antinodes by extending in both directions
            antinode1 = [antenna1[0] - dx, antenna1[1] - dy]
            antinode2 = [antenna2[0] + dx, antenna2[1] + dy]

            # Validate antinodes are in bounds
            if 0 <= antinode1[0] < len(memory) and 0 <= antinode1[1] < len(memory[0]):
                antinodes.add(tuple(antinode1))
            if 0 <= antinode2[0] < len(memory) and 0 <= antinode2[1] < len(memory[0]):
                antinodes.add(tuple(antinode2))

print("\n\033[37mThe number of unique antinodes is:\033[0m\033[1m", len(antinodes))

# 522 too high
# 217 too high

# SECOND PART
